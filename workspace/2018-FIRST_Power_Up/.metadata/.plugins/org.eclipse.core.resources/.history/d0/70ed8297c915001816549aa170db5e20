/*----------------------------------------------------------------------------*/
/* Copyright (c) 2017-2018 FIRST. All Rights Reserved.                        */
/* Open Source Software - may be modified and shared by FRC teams. The code   */
/* must be accompanied by the FIRST BSD license file in the root directory of */
/* the project.                                                               */
/*----------------------------------------------------------------------------*/


/**USE THIS ONE!!*/

package org.usfirst.frc.team4681.robot;

import edu.wpi.first.wpilibj.CameraServer;

//import org.ejml.simple.SimpleMatrix;

//import edu.wpi.first.wpilibj.ADXRS450_Gyro;
import edu.wpi.first.wpilibj.Compressor;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.Solenoid;
import edu.wpi.first.wpilibj.TimedRobot;
import edu.wpi.first.wpilibj.Victor;
import edu.wpi.first.wpilibj.drive.MecanumDrive;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
/* TODO:
 * 1. Test encoders
 * 2. Test smooth victors
 * 3. Implement vector addition forward kinematics
 * 4. Test autonomous
 * 5. other stuff?
 * 
 */
/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the build.properties file in the
 * project.
 */
public class Robot extends TimedRobot {
	//
	private static final String kDefaultAuto = "Default";
	private static final String kCustomAuto = "My Auto";
	//motor outputs
	private final int frontLeft = 1;
	private final int backLeft = 0;
	private final int backRight = 2;
	private final int frontRight = 3;
	//Pneumatics
	Compressor compressor;
	private final int frontExtendPort = 0;
	private final int frontClampPort = 1;
	private final int rearExtendPort = 2;
	private final int rearClampPort = 3;
	Solenoid frontExtend;
	Solenoid frontClamp;
	Solenoid rearExtend;
	Solenoid rearClamp;
	//mecanum wheel thetas
	/*private final double theta1 = -Math.PI/4;
	private final double theta2 = Math.PI/4;
	private final double theta3 = -Math.PI/4;
	private final double theta4 = Math.PI/4;*/
	private double[] theta;
	//Encoders
	/*Encoder frontLeftEncoder;
	Encoder frontRightEncoder;
	Encoder backLeftEncoder;
	Encoder backRightEncoder;*/
	Encoder[] encoders;
	double[] pulsesPerRev;
	//wheel offsets
	double[][] wheelOffsets;
	//wheel positions 
	double[][] wheelPositions;
	private String m_autoSelected;
	private SendableChooser<String> m_chooser = new SendableChooser<>();
	//xbox controller
	Joystick controller;
	//pre-made mecanum drive class
	MecanumDrive robotDrive;
	//forward kinematics
	
	///SimpleMatrix R;
	double[][] RData;
	////SimpleMatrix V;
	//SimpleMatrix Omega;
	double[][] OmegaData;
	double xPos, yPos = 0.0; //measured in inches from the robot's starting position
	double direction = 0.0; //measured in radians counterclockwise from the initial heading of the robot
	double wheelRadius = 4.0; //inches
	double framesPerSecond = 50;
	boolean tryForwardKin = false;
	
	AutonomousRoutine[] autonomousRoutines;
	CameraServer cameraServer;
	
	 /* Buttons:
		 * 1 = X, 2 = A, 3 = B, 4 = Y
		 * 5 = Left Bumper (LB)
		 * 6 = Right Bumper (RB)
		 * 7 = Left Trigger (LT)
		 * 8 = Right Trigger (RT)
		 * 9 = Back Button
		 * 10 = Start Button
		 * 11 = Left Stick Press (Click In)
		 * 12 = Right Stick Press (Click In)
		 */
	final int buttonX = 1;
	final int buttonA = 2;
	final int buttonB = 3;
	final int buttonY = 4;
	final int leftBumper = 5;
	final int rightBumper = 6;
	final int leftTrigger = 7;
	final int rightTrigger = 8;
	final int backButton = 9;
	final int startButton = 10;
	//Gyroscope
	//ADXRS450_Gyro gyroscope;
	/**
	 * This function is run when the robot is first started up and should be
	 * used for any initialization code.
	 */
	@Override
	public void robotInit() {
		/*AutonomousRoutine.minDistance = 3.0; //Needs to be determined by guess and check
		AutonomousRoutine.matchRotation = true;//might need to disable rotational matching if it screws up stuff4
		AutonomousRoutine.minRotDifference = 3.0; 
		
		m_chooser.addDefault("Default Auto", kDefaultAuto);
		for(int r = 0; r < autonomousRoutines.length; r++) {
			m_chooser.addObject(autonomousRoutines[r].name, new Integer(r).toString());
		
		}
		m_chooser.addObject("My Auto", kCustomAuto);
		SmartDashboard.putData("Auto choices", m_chooser);*/
		
		Victor frontLeftVictor = new Victor(frontLeft);
		Victor backLeftVictor = new Victor(backLeft);
		Victor backRightVictor = new Victor(backRight);
		Victor frontRightVictor = new Victor(frontRight);
		//Encoder on wheel n goes in ports 2n and 2n+1 (so wheel 0 goes to ports 0 and 1, wheel 1 goes to ports 2 and 3 etc..).
		encoders[frontLeft] = new Encoder(frontLeft*2,(frontLeft*2)+1,  false, EncodingType.k4X);
		encoders[frontRight]= new Encoder(frontRight*2,(frontRight*2)+1, false, EncodingType.k4X);
		encoders[backLeft] = new Encoder(backLeft*2,(backLeft*2)+1,  false, EncodingType.k4X);
		encoders[backRight] = new Encoder(backRight*2,(backRight*2)+1,  false, EncodingType.k4X);
		pulsesPerRev = new double[] {250.0, 250.0, 250.0, 250.0};
		
		frontExtend = new Solenoid(frontExtendPort);
		frontClamp = new Solenoid(frontClampPort);
		rearExtend = new Solenoid(rearExtendPort);
		rearClamp = new Solenoid(rearClampPort);
		
		frontExtend.set(false);
		frontClamp.set(false);
		rearExtend.set(false);
		rearClamp.set(false);
		
		compressor = new Compressor();
		
		
		controller = new Joystick(0);
		robotDrive = new MecanumDrive(frontLeftVictor, backLeftVictor, frontRightVictor, backRightVictor);
		
		theta = new double[] {-Math.PI/4,Math.PI/4,-Math.PI/4,Math.PI/4};
		/*R = new SimpleMatrix(4,3);
		V = new SimpleMatrix(3,1);
		Omega = new SimpleMatrix(1,4);*/
		//check this stuff mendems !
		wheelOffsets = new double[][] { {-13.0625, 10.25}, //front left inches
										{-13.0625, -10.25}, //back left 
										{13.0625, -10.25}, //back right
										{13.0625, 10.25}}; //front right
		wheelPositions = new double[4][2];
		RData = new double[4][3];
		OmegaData = new double[1][4];
		//gyroscope = new ADXRS450_Gyro();
		cameraServer = CameraServer.getInstance();
		cameraServer.startAutomaticCapture("Camera", 0);
		cameraServer.startAutomaticCapture("Camera 2", 1);
	}
	/**
	 * This autonomous (along with the chooser code above) shows how to select
	 * between different autonomous modes using the dashboard. The sendable

	 * chooser code works with the Java SmartDashboard. If you prefer the
	 * LabVIEW Dashboard, remove all of the chooser code and uncomment the
	 * getString line to get the auto name from the text box below the Gyro
	 *
	 * <p>You can add additional auto modes by adding additional comparisons to
	 * the switch structure below with additional strings. If using the
	 * SendableChooser make sure to add them to the chooser code above as well.
	 */
	@Override
	public void autonomousInit() {
		m_autoSelected = m_chooser.getSelected();
		// m_autoSelected = SmartDashboard.getString("Auto Selector",
		// 		kDefaultAuto);
		System.out.println("Auto selected: " + m_autoSelected);
	}

	/**
	 * This function is called periodically during autonomous.
	 */
	@Override
	public void autonomousPeriodic() {
		switch (m_autoSelected) {
			case kCustomAuto:
				// Put custom auto code here
				break;
			case kDefaultAuto:
			default:
				// Put default auto code here
				break; 
		}
		/*double[][] Rdata = new double[][]  {{1.0}
		{1.0}
		{}
		{}};*/
	}

	/**
	 * This function is called periodically during operator control.
	 */
	@Override
	public void teleopInit() 
	{
		compressor.start();
		/*for(int wheel = 0; wheel < 4; wheel++)
		{
			encoders[wheel].reset();
		}*/
		//gyroscope.reset();
		//gyroscope.calibrate();
	}
	@Override
	public void teleopPeriodic() {
		
		//robotDrive.driveCartesian(controller.getRawAxis(0), -controller.getRawAxis(1), controller.getRawAxis(2)); // built-in mecanum drive class, takes x, y and rotational motion
		if (controller.getRawButtonPressed(rightTrigger))
		{
			frontExtend.set(!frontExtend.get());
		}
		if(controller.getRawButtonPressed(leftTrigger))
		{
			frontClamp.set(!frontClamp.get());
		}
		if(controller.getRawButtonPressed(rightBumper))
		{
			rearExtend.set(!rearExtend.get());
		}
		if(controller.getRawButtonPressed(leftBumper))
		{
			rearClamp.set(!rearClamp.get());
		}
		//SmartDashboard.putNumber("Testing the position of an encoder: ", frontLeftEncoder.getDistance());
		//System.out.println(frontLeftEncoder.getDistance());
		/*SmartDashboard.putNumber("Front Left Encoder", encoders[frontLeft].getRate());
		SmartDashboard.putNumber("Front right encoder", encoders[frontRight].getRate());
		SmartDashboard.putNumber("Back left encoder", encoders[backLeft].getRate());
		SmartDashboard.putNumber("Back Right Encoder", encoders[backRight].getRate());
		SmartDashboard.putBoolean("Trying Forward Kinematics", tryForwardKin);
		if(controller.getRawButtonPressed(buttonX))
			tryForwardKin = !tryForwardKin;
		if(tryForwardKin) { // this might be way too complex of a calculation now that I think about, idk if the RoboRIO can keep time
			double[] forward = new double[] {-Math.sin(direction), Math.cos(direction)}; // unit vector towards the front of the robot from the center
			double[] right = new double[] {Math.cos(direction), Math.sin(direction)}; //unit vector towards the right side of the robot from the center
			
			for(int wheel = 0; wheel < 4; wheel++)
			{
				wheelPositions[wheel][0] = wheelOffsets[wheel][1]*forward[0] + wheelOffsets[wheel][0]*right[0]; //use forward and right unit vectors to calculate where the wheels are
				wheelPositions[wheel][1] = wheelOffsets[wheel][1]*forward[0] + wheelOffsets[wheel][0]*right[0]; 
				RData[wheel][0] = 1.0;
				double t = Math.tan(theta[wheel]);
				RData[wheel][1] = t;
				RData[wheel][2] = wheelPositions[wheel][0]*t - wheelPositions[wheel][1];
				OmegaData[0][wheel] = 2 * Math.PI * encoders[wheel].getRate()/pulsesPerRev[wheel]; //converts pulses per second to radians per second
			}
			R = new SimpleMatrix(RData);
			Omega = new SimpleMatrix(OmegaData);
			SimpleMatrix temp1 = R.transpose().mult(R).invert();
			V = (temp1.mult(R.transpose()).mult(Omega));
			xPos += wheelRadius*V.get(0, 0)/framesPerSecond; //MAKING SURE TO CONVERT FROM INCHES PER SECOND TO INCHES PER FRAME
			yPos += wheelRadius*V.get(1, 0)/framesPerSecond;
			direction += wheelRadius*V.get(2,0)/framesPerSecond; //converting from RAD/SEC to RAD/FRAME
			double xVelMph = 3600*V.get(0,0)/63360; // convert inches/second to mph
			double yVelMph = 3600*V.get(1,0)/63360;
			SmartDashboard.putNumber("Speed (mph)", Math.sqrt(Math.pow(xVelMph, 2) + Math.pow(yVelMph, 2))); //sanity check
			SmartDashboard.putNumber("X Position (inches)", xPos);
			SmartDashboard.putNumber("Y Position (inches)", yPos);
			SmartDashboard.putNumber("Direction (degrees)", 180.0*direction/Math.PI);
		}
		//SmartDashboard.putNumber("Gyroscope angle", gyroscope.getAngle());*/
	}

	/**
	 * This function is called periodically during test mode.
	 */
	@Override
	public void testPeriodic() {
	}
}
